package nuclearscience.item;

import java.util.LinkedList;
import java.util.List;

import ic2.api.item.ElectricItem;
import ic2.api.item.IElectricItem;
import ic2.api.item.IItemHudInfo;
import net.minecraft.client.renderer.texture.IIconRegister;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.util.IIcon;
import net.minecraft.world.World;
import nuclearscience.NuclearScience;

public class ItemLapotronStorageUnit extends Item implements IElectricItem, IItemHudInfo {

	private IIcon[] icons;

	private double maxEnergy;

	public ItemLapotronStorageUnit() {
		maxEnergy = 50000000;
		icons = new IIcon[6];
		setMaxDamage(27);
		setMaxStackSize(1);
		setNoRepair();
	}

	@Override
	public void registerIcons(IIconRegister iconRegister) {
		for (int i = 0; i < icons.length; i++) {
			icons[i] = iconRegister.registerIcon("nuclearscience:lapotronStorage" + i);
		}
	}

	@Override
	public IIcon getIcon(ItemStack stack, int pass) {
		double energy = readFromNbt(stack);
		if (energy >= 50000000.0D)
			return icons[5];
		else if (energy >= 40000000.0D)
			return icons[4];
		else if (energy >= 30000000.0D)
			return icons[3];
		else if (energy >= 20000000.0D)
			return icons[2];
		else if (energy >= 10000000.0D)
			return icons[1];
		return icons[0];
	}

	@Override
	public IIcon getIconFromDamage(int damage) {
		if (damage >= 27)
			return icons[5];
		else if (damage >= 22)
			return icons[4];
		else if (damage >= 17)
			return icons[3];
		else if (damage >= 12)
			return icons[2];
		else if (damage >= 7)
			return icons[1];
		else if (damage <= 1)
			return icons[0];
		return icons[0];
	}

	public static void writeToNbt(ItemStack itemStack, double energy) {
		NBTTagCompound nbt = itemStack.getTagCompound();
		if (nbt == null) {
			itemStack.setTagCompound(new NBTTagCompound());
			nbt = itemStack.getTagCompound();
		}
		nbt.setDouble("energy", energy);
	}

	public static double readFromNbt(ItemStack itemStack) {
		NBTTagCompound nbt = itemStack.getTagCompound();
		if (nbt == null) {
			writeToNbt(itemStack, 0);
			nbt = itemStack.getTagCompound();
		}
		if (nbt.hasKey("energy"))
			return nbt.getDouble("energy");
		NuclearScience.error("Failed to read energy from item " + itemStack + ". No energy NBT-Tag found.");
		return 0;
	}

	@Override
	public int getDamage(ItemStack stack) {
		double energy = readFromNbt(stack);
		if (energy <= 0.0D)
			return 27;
		double var = energy / getMaxCharge(stack);
		return (int) var - 27;
	}

	@Override
	public boolean canProvideEnergy(ItemStack itemStack) {
		return true;
	}

	@Override
	public Item getChargedItem(ItemStack itemStack) {
		return this;
	}

	@Override
	public Item getEmptyItem(ItemStack itemStack) {
		return this;
	}

	@Override
	public double getMaxCharge(ItemStack itemStack) {
		return maxEnergy;
	}

	@Override
	public int getTier(ItemStack itemStack) {
		return 4;
	}

	@Override
	public double getTransferLimit(ItemStack itemStack) {
		return 2048.0D;
	}

	@Override
	public List<String> getHudInfo(ItemStack itemStack) {
		List<String> info = new LinkedList();
		info.add(ElectricItem.manager.getToolTip(itemStack));
		return info;
	}

}
