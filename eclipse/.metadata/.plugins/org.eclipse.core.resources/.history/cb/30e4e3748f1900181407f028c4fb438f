package nuclearscience.tile;

import java.io.IOException;

import ic2.api.energy.event.EnergyTileLoadEvent;
import ic2.api.energy.event.EnergyTileUnloadEvent;
import ic2.api.energy.tile.IEnergyEmitter;
import ic2.api.energy.tile.IEnergySink;
import ic2.api.energy.tile.IEnergySource;
import ic2.api.tile.IEnergyStorage;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.network.INetHandler;
import net.minecraft.network.Packet;
import net.minecraft.network.PacketBuffer;
import net.minecraft.tileentity.TileEntity;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.common.util.ForgeDirection;

public class TileEntityLaptronStorage extends TileEntity implements IEnergySink, IEnergySource, IEnergyStorage {

	public double energy = 0.0D;
	public double maxEnergy = 100000000.0D;

	private boolean initialized;

	@Override
	public void readFromNBT(NBTTagCompound nbt) {
		super.readFromNBT(nbt);
		if (nbt.hasKey("energy")) {
			this.energy = nbt.getDouble("energy");
		}
	}

	@Override
	public void writeToNBT(NBTTagCompound nbt) {
		super.writeToNBT(nbt);
		nbt.setDouble("energy", this.energy);
	}
	
	public void sendSyncPacket() {
		
	}

	public int getOutputSide() {
		return worldObj.getBlockMetadata(xCoord, yCoord, zCoord);
	}

	@Override
	public void updateEntity() {
		if (!initialized && worldObj != null) {
			if (!worldObj.isRemote) {
				EnergyTileLoadEvent loadEvent = new EnergyTileLoadEvent(this);
				MinecraftForge.EVENT_BUS.post(loadEvent);
			}
			initialized = true;
		}
	}

	@Override
	public void invalidate() {
		EnergyTileUnloadEvent unloadEvent = new EnergyTileUnloadEvent(this);
		MinecraftForge.EVENT_BUS.post(unloadEvent);
	}

	@Override
	public boolean acceptsEnergyFrom(TileEntity emitter, ForgeDirection direction) {
		return !direction.equals(ForgeDirection.getOrientation(getOutputSide()));
	}

	@Override
	public double getDemandedEnergy() {
		return this.maxEnergy - this.energy;
	}

	@Override
	public int getSinkTier() {
		return 4;
	}

	@Override
	public double injectEnergy(ForgeDirection directionFrom, double amount, double voltage) {
		if (this.energy >= this.maxEnergy)
			return amount;

		double demandedEnergy = getDemandedEnergy();

		if (demandedEnergy >= amount) {
			this.energy += amount;
			return 0;
		} else if (amount >= demandedEnergy) {
			this.energy = this.maxEnergy;
			return amount - demandedEnergy;
		}
		return 0;
	}

	@Override
	public boolean emitsEnergyTo(TileEntity receiver, ForgeDirection direction) {
		return direction.equals(ForgeDirection.getOrientation(getOutputSide()));
	}

	@Override
	public double getOfferedEnergy() {
		return Math.min(energy, 4096.0D);
	}

	@Override
	public void drawEnergy(double amount) {
		this.energy -= amount;
	}

	@Override
	public int getSourceTier() {
		return 4;
	}

	@Override
	public int getStored() {
		return (int) energy;
	}

	@Override
	public void setStored(int energy) {
		this.energy = energy;
	}

	@Override
	public int addEnergy(int amount) {
		if (energy + amount > this.maxEnergy) {
			this.energy = this.maxEnergy;
		}
		this.energy += energy;
		return (int) energy;
	}

	@Override
	public int getCapacity() {
		return (int) this.maxEnergy;
	}

	@Override
	public int getOutput() {
		return 4096;
	}

	@Override
	public double getOutputEnergyUnitsPerTick() {
		return 4096;
	}

	@Override
	public boolean isTeleporterCompatible(ForgeDirection side) {
		return false;
	}
}
